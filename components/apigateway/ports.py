from __future__ import annotations
from typing import Any, Dict, List, Optional, Protocol
from .contracts import (
    AuthContext, CreateIngestionRequest, AppendFilesRequest,
    FinalizeIngestionRequest, IngestionJob, SearchRequest, SearchResult,
    ChatCompletionRequest, ChatResult, FileMetadata
)

# These are the *interfaces* (ports). Adapters will implement these.

class AuthPort(Protocol):
    def verify_token(self, token: str) -> AuthContext: ...
    def authorize(self, ctx: AuthContext, scopes: List[str]) -> None: ...

class RateLimiterPort(Protocol):
    def check(self, key: str, cost: int = 1) -> None: ...
    def consume(self, key: str, cost: int = 1) -> None: ...

class IngestionPort(Protocol):
    def create_job(self, ctx: AuthContext, req: CreateIngestionRequest) -> IngestionJob: ...
    def append_files(self, ctx: AuthContext, job_id: str, req: AppendFilesRequest) -> IngestionJob: ...
    def finalize_job(self, ctx: AuthContext, job_id: str, req: FinalizeIngestionRequest) -> IngestionJob: ...
    def get_job(self, ctx: AuthContext, job_id: str) -> IngestionJob: ...

class SearchPort(Protocol):
    def search(self, ctx: AuthContext, req: SearchRequest) -> SearchResult: ...

class ChatPort(Protocol):
    def completion(self, ctx: AuthContext, req: ChatCompletionRequest) -> ChatResult: ...

class MetadataPort(Protocol):
    def get_file_metadata(self, ctx: AuthContext, file_id: str) -> FileMetadata: ...
    def set_tags(self, ctx: AuthContext, file_id: str, tags: List[str]) -> FileMetadata: ...
